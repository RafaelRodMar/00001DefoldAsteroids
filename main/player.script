go.property("angular_velocity", 5)
go.property("velx", 0)
go.property("vely", 0)
go.property("angle", 0)
go.property("thrust", false)

function init(self)
	msg.post(".", "acquire_input_focus")

	self.rotate = 0
	self.forward = false
	self.brake = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	wx, wy = window.get_size()
	local pos = go.get_position()
	local rot = go.get_rotation()

	rot = rot * vmath.quat_rotation_z(self.angular_velocity * self.rotate * dt)
	go.set_rotation(rot)

	if self.thrust then
		self.velx = self.velx + math.cos(math.rad(self.angle + 90)) * 0.2
		self.vely = self.vely + math.sin(math.rad(self.angle + 90)) * 0.2
	else
		self.velx = self.velx * 0.99
		self.vely = self.vely * 0.99
	end

	local maxSpeed = 15
	local speed = math.sqrt(self.velx * self.velx + self.vely * self.vely)
	if speed > maxSpeed then
		self.velx = self.velx * maxSpeed / speed
		self.vely = self.vely * maxSpeed / speed
	end

	pos.x = pos.x + self.velx * dt * 25
	pos.y = pos.y + self.vely * dt * 25

	if pos.x > wx then pos.x = 0 end
	if pos.x < 0 then pos.x = wx end
	if pos.y > wy then pos.y = 0 end
	if pos.y < 0 then pos.y = wy end
	go.set_position(pos)
end

function on_message(self, message_id, message, sender)
	-- basic contact separation
	--if message_id == hash("contact_point_response") and message.group == hash("wall") then
	--	go.set_position(go.get_position() + message.normal * message.distance)
	--end

	if message_id == hash("collision_response") then
		msg.post("#shipExplosion", "play_sound")
	end
end

function on_input(self, action_id, action)
	-- set direction of rotation based on user input
	if action_id == hash("KEYLEFT") then
		if action.pressed then
			self.rorate = 1
		elseif action.released then
			self.rotate = 0
		end
	elseif action_id == hash("KEYRIGHT") then
		if action.pressed then
			self.rotate = -1
		elseif action.released then
			self.rotate = 0
		end
	end

	if action_id == hash("FORWARD") then
		if action.pressed then
			msg.post("#ship", "play_animation", { id = hash("ship_thrust") })
			self.thrust = true
		elseif action.released then
			msg.post("#ship", "play_animation", { id = hash("shipiddle") })
			self.thrust = false
		end
	end
-- 	if action_id == hash("KEYLEFT") then
-- 		if action.pressed then
-- 			self.rotate = 1
-- 		elseif action.released then
-- 			self.rotate = 0
-- 		end
-- 	elseif action_id == hash("KEYRIGHT") then
-- 		if action.pressed then
-- 			self.rotate = -1
-- 		elseif action.released then
-- 			self.rotate = 0
-- 		end
-- 	end
-- 
-- 	if action_id == hash("FORWARD") then
-- 		if action.pressed then
-- 			msg.post("#ship", "play_animation", { id = hash("ship_thrust") })
-- 			if self.linear_velocity < 200 then
-- 				self.forward = true
-- 			end
-- 		elseif action.released then
-- 			msg.post("#ship", "play_animation", { id = hash("shipiddle") })
-- 			self.forward = false
-- 		end
-- 	elseif action_id == hash("BRAKE") then
-- 		if action.pressed then
-- 			if self.linear_velocity > 0 then
-- 				self.brake = true
-- 			end
-- 		elseif action.released then
-- 			self.brake = false
-- 		end
-- 	end

	if (action_id == hash("FIRE")) and action.released then
		msg.post("#laserBlast", "play_sound")
		
		local rotation = go.get_rotation()
		local position = go.get_position() + vmath.rotate(rotation, vmath.vector3(0, 40, 0)) --40 the laser is fired from the head
		local to = position + vmath.rotate(rotation, vmath.vector3(0, 1500, 0)) --1500 is the distance to stop
		local bullet = factory.create("#bulletFactory", position, rotation)
		go.animate(bullet, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_LINEAR, 5)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
